38111
Software engineering quotes

Engineering quotes I like, collected over many years. Also see [engineering lessons](/engineering-lessons).

> All code is liability.

\- Peter Norvig
<!-- NCXed -->

> Information wants to be free.  

\- Stewart Brand
<!-- NCXed -->

> Data wants to be dirty.  
> Duplicated data wants to skew.

\- Me
<!-- NCXed -->

> Scope wants to creep.

\- [Todd Wolfson](https://twolfson.com/)
<!-- NCXed -->

> Code wants to be broken.

[- Noam Ben-Ami](https://www.quora.com/Why-is-coding-so-hard)
<!-- NCXed -->

> All models are wrong. Some are useful.
<!-- NCXed, by Nathan -->

> Computing's core challenge is how not to make a mess of it.

[- Edsger W. Dijkstra](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1304.html)
<!-- NCX next -->

> By June 1949, people had begun to realize that it was not so easy to get a program right as had at one time appeared. ... It was on one of my journeys between the EDSAC room and the punching equipment that the realization came over me with full force that a good part of the remainder of my life was going to be spent in finding errors in my own programs.

[- Maurice Vincent Wilkes](https://www.google.com/books/edition/Memoirs_of_a_Computer_Pioneer/9Uc4AQAAIAAJ?hl=en)
<!-- NCXed -->

> A systems programmer will know what to do when society breaks down, because the systems programmer already lives in a world without law.

[- James Mickens](https://web.archive.org/web/20140124024832/http://research.microsoft.com/en-us/people/mickens/thenightwatch.pdf)

> Docker containers are kind of neat. They are also kind of a craven surrender to the rotting mess of excessive software complexity.

[- John Carmack](https://twitter.com/ID_AA_Carmack/status/1385103110977179649)
Hamming

> The first rule of systems engineering is: If you optimize the components you will probably ruin the system performance.

\- Richard W. Hamming
<!-- NCXed -->

> 1. Make the requirements less dumb.  
>    (Aka, question the requirements.)  
> 2. Try very hard to delete the part or process.  
>    (Aka, the best part is no part. The best process is no process.)
> 3. Simplify and optimize the design.  
> 4. Accelerate cycle time.  
> 5. Automate.  

\- Elon Musk
<!-- NCXed -->

> To this very day, idiot software managers measure "programmer productivity" in terms of "lines of code produced," whereas the notion of "lines of code spent" is much more appropriate.

\- Edsger W. Dijkstra

> Running a successful open source project is just Good Will Hunting in reverse, where you start out as a respected genius and end up being a janitor who gets into fights.

[- Byrne Hobart](https://diff.substack.com/p/working-in-public-and-the-economics)
<!-- NCXed -->

> Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.

\- [Conway's Law](https://en.wikipedia.org/wiki/Conway%27s_law)

> When a program has nothing surprising, interesting or useful to say, it should say nothing.

\- [The UNIX Rule of Silence](http://www.linfo.org/rule_of_silence.html)

> A program that uses an interface must not be confused by an implementation of that interface.

\- Liskov Substitution Principle

> Gather together the things that change for the same reasons. Separate things that change for different reasons.

\- Single Responsibility Principle

> A Module should be open for extension but closed for modification.

\- Open-Closed Principle

> Keep interfaces small so that users don’t end up depending on things they don’t need.

\- Interface Segregation Principle

> Depend in the direction of abstraction. High level modules should not depend upon low level details.

\- Dependency Inversion Principle

> Type systems and type checking in programming languages are just an approximate solution to a more general problem: determining whether a program is free of errors for all possible values of variables along all possible control flow paths.

[- Tim Sweeney](https://twitter.com/TimSweeneyEpic/status/1307778368562171904)
<!-- NCXed -->

> Always do the hard part first. If the hard part is impossible, why waste time on the easy part? Once the hard part is done, you’re home free.

\- Al Schapira

> Always do the easy part first. What you think at first is the easy part often turns out to be the hard part. Once the easy part is done, you can concentrate all your efforts on the hard part.

\- Al Schapira

> Of all my programming bugs, 80 percent are syntax errors. Of the remaining 20 percent, 80 percent are trivial logical errors. Of the remaining 4 percent, 80 percent are pointer errors. And the remaining 0.8 percent are hard.

\- Marc Donner
<!-- NCX next. include https://www.cnbc.com/amp/2021/10/01/defi-protocol-compound-mistakenly-gives-away-millions-to-users.html -->

> Twenty percent of all input forms filled out by people contain bad data.

\- Vie Vyssotsky

> Eighty percent of all input forms ask questions they have no business asking.

\- Mike Garey

> When in doubt, use brute force.

\- Ken Thompson, Bell Labs
<!-- NCXed -->

> To be a programmer is to develop a carefully managed relationship with error.

\- Ellen Ullman

[engineering flowchart, wd40 vs duct tape](https://www.flickr.com/photos/dullhunk/7214525854)

> Everything should be built top-down, except the first time.

\- Alan Perlis

> We build our computer systems the way we build our cities: over time, without a plan, on top of ruins.

\- [_Life in Code_](https://www.google.com/books/edition/Life_in_Code/rPTtDQAAQBAJ), Ellen Ulman
<!-- NCXed -->

> Choose the least powerful programming language suitable for a given purpose, not the most powerful.

\- [Rule of least power](https://en.wikipedia.org/wiki/Rule_of_least_power), W3C
<!-- NCXed -->

> maybe teaching sand to do math was a mistake

[– @wirehead2501](https://twitter.com/wirehead2501/status/933225268990197760)

> if you ever code something that "feels like a hack but it works," just remember that a CPU is literally a rock that we tricked into thinking  
>   
> not to oversimplify: first you have to flatten the rock and put lightning inside it

\- ben ([@daisyowl](https://twitter.com/daisyowl/status/841806379962646532))

> The more equally attractive two alternatives seem, the harder it can be to choose between them — no matter that, to the same degree, the choice can only matter less.

\- Edward Fredkin

> Before you can develop reusable software you need to have developed it three times. Before you can reap the benefits of reuse, you need to reuse it at least three times.

\- "Rule of Threes," Ted Biggerstaff, via Will Tracz

> We have a squeaky bathroom door, so I thought we need to oil it. Then I realised there are a few other doors in the house that need oiled. Then I thought "wouldn't it be cool if I could pour oil down one pipe and oil all the doors at once?" That's how software engineers think.

[- Paul Campbell](https://twitter.com/paulca/status/1265407453753217024)
<!-- NCX next -->

> When AT&T donated the V6 source code to Berkeley, it was classified as industrial waste for tax purposes.
>
> As it was explained to me, the law at the time said if your business produced byproducts that had economically recoverable value, you could get a tax break by donating them.
>
> So, for example, if you were Kodak, and your film factory produced effluent with silver dissolved in it, you could get a tax break by donating it to someone who'd recover the silver.
>
> AT&T being the Phone Company, they were forbidden to commercialize anything not directly related to telephony. UNIX was a byproduct of their research work, and they couldn't sell it. But they could give it away as sludge!

[- Evan Hunt](https://twitter.com/nuthaven/status/1254897999290892289)
<!-- NCXed -->

> Just like entropy always increases, mean time to failure always decreases.

\- Alan Perlis, paraphrased
<!-- NCXed -->

> I'll buckle down and get to work as soon as I finish reading the internet.

\- Unknown

> Show me your flowcharts, and conceal your tables, and I shall continue to be mystified; show me your tables and I won't usually need your flowcharts: they'll be obvious.

\- Fred Brooks, _The Mythical Man Month_

> Technology is anything that doesn't work quite yet.

\- Danny Hillis

> Early in the morning of 17 July 1997, human error at Network Solutions causes the DNS table for .com and .net domains to become corrupted, making millions of systems unreachable.

[- RFC 2235: Hobbes' Internet Timeline](https://tools.ietf.org/html/rfc2235)

> There are really only two types of computations: calculating stuff about an unchanging thing, and calculating a new version of a thing that is changing over time. Recognizing this simplifies the debate over functional versus imperative programming.

[- Tim Sweeney](https://twitter.com/TimSweeneyEpic/status/1195743672899383296)

> The Fallacies of Distributed Computing  
>  
> * The network is reliable  
> * Latency is zero  
> * Bandwidth is infinite  
> * The network is secure  
> * Topology doesn't change  
> * There is one administrator  
> * Transport cost is zero  
> * The network is homogeneous

\- Bill Joy, Tom Lyon

> The paging will continue until the nines improve.

\- [Hank Jacobs](https://twitter.com/hankjacobs/status/1231773847025664000)

> All code is technical debt; it’s just different interest rates we’re paying on it. Debt powers the economy and it powers your business. None of this is inherently good or bad. It’s a tool.

\- Dormain Drewitz

> The condition of any backup is unknown until a restore is attempted.

\- "Schrödinger's Backup," Redditor intelx88

> Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.

\- Brian Kernighan (aka Kernighan's Law)

> [On naming systems]  
>   
> Human-meaningful, secure, decentralized: choose two.

\- Zooko's Triangle, Zooko Wilcox-O'Hearn

> Consistency, availability, partition tolerance: choose two.

\- [CAP Theorem](https://en.wikipedia.org/wiki/CAP_theorem), Eric Brewer
<!-- NCXed -->

> When we can finally print from any computer to any printer consistently, there will be no computer science problems left to solve.

\- Steve Moyer (Moyer's Law)

> If it doesn’t work, it doesn’t matter how fast it doesn’t work.

\- Mich Ravera

> Never attribute to malice that which can be adequately explained by stupidity.

\- Hanlon’s Razor

> Never attribute to stupidity that which can be adequately explained by complexity.

\- Thompson’s Razor

> There is always a well-known solution to every human problem - neat, plausible, and wrong.

[- Henry Louis Mencken](https://quoteinvestigator.com/2016/07/17/solution/)

> The Tao gave birth to machine language. Machine language gave birth to the assembler. The assembler gave birth to the compiler. Now there are ten thousand languages.
>
> Each language has its purpose, however humble. Each language expresses the Yin and Yang of software. Each language has its place within the Tao.
>
> But do not program in COBOL if you can avoid it.

[- Geoffrey James, _The Tao Of Programming_](http://canonical.org/~kragen/tao-of-programming.html)

> Oftentimes, when trying to reinvent the wheel, you end up with a wheel. But there is a nice moment of "huh, I guess that's why people just use wheels"... that process of justifying the standard is satisfying, if massively wasteful.

\- Mike Bithell

> An [engineer] can mull over complicated designs for months. Then suddenly the simple, elegant, beautiful solution occurs to them. When it happens to you, it feels as if God is talking! And maybe He is.

\- Leo Frankowski

> The percentage of users without fully functioning JavaScript is approximately 1%...If you had an application bug which occurred 1% of the time, you’d fix it. No team I’ve come across would put up with that level of reliability.

[- Adam Silver](https://adamsilver.io/articles/javascript-isnt-always-available-and-its-not-the-users-fault/)

> Cryptography turns a big amount of data to secure into a big amount of data and a small additional amount of radioactive waste.

[- Sophie Schmieg](https://twitter.com/SchmiegSophie/status/1198620475112353793)

> Insecurity is like entropy. You can't eliminate it, but you can move it around.

\- internal NSA saying, via [Steve Bellovin](https://twitter.com/SteveBellovin)

> All code you haven’t tested is wrong. All code you have tested is also wrong, but appears to work by coincidence. And code you’ve proven correct does the wrong thing, correctly.

[- Tim Sweeney](https://twitter.com/TimSweeneyEpic/status/1192527288723804160)

> The paradox is that when managers focus on productivity, long-term improvements are rarely made. On the other hand, when managers focus on quality, productivity improves continuously.

[- John Seddon](http://shop.oreilly.com/product/0636920030355.do) ([more](https://nesma.org/2015/01/programmer-productivity-is-waste-of-time/))

> One of the superpowers of the most effective programmers must be *not* travelling down a meandering hole of upgrading all code possibly tangentially related to the thing they are working on.  
>   
> I have not mastered this.

[- Patrick McKenzie](https://twitter.com/patio11/status/1188675681405718529)

> There exists in such a case a certain institution or law; let us say, for the sake of simplicity, a fence or gate erected across a road. The more modern type of reformer goes gaily up to it and says, 'I don't see the use of this; let us clear it away.' To which the more intelligent type of reformer will do well to answer: 'If you don't see the use of it, I certainly won't let you clear it away. Go away and think. Then, when you can come back and tell me that you do see the use of it, I may allow you to destroy it.'

[- "Chesterton's Fence"](https://en.wikipedia.org/wiki/G._K._Chesterton#Chesterton's_fence) (G. K. Chesterton)
<!-- NCX next -->

> _At my last job, a team put up a poster for their reusable components. It said:_  
> We made a thing from scratch, so you don’t HAVE to make things from scratch.  
> _But when engineers read this, they see:_  
> We made a thing from scratch, so you don’t GET to make things from scratch.

[- M. J. Fromberger](https://twitter.com/creachadair/status/1173764360969150464)

> What five words best describe programming?  
> Tell rocks what to think  
> It works on my computer  
> Google, StackOverflow, Quora, Reddit, Slack  
> My estimate of five words was slightly off  
> Turtles all the way down  
> How did this ever work?  

[- @abstractionscon](https://twitter.com/abstractionscon/status/988568678961696769)

> When you finish a PhD in computer science, they take to a special room and explain that you must never use recursion in real life. Its only purpose is to make programming hard for undergrads.

[- John Wilander](https://twitter.com/johnwilander/status/1176457013305303040)

> Another flaw in the human character is that everybody wants to build and nobody wants to do maintenance.

\- Kurt Vonnegut, _Hocus Pocus_

> A simple heuristic for technical debt: It's always fine to introduce a quick hack. But as soon as you have to work around that hack, stop and fix it instead.

[- Aaron Boodman](https://twitter.com/aboodman/status/11686231818646609934)


> If you have a procedure with 10 parameters, you probably missed some.

\- Alan Perlis

> Optimization hinders evolution.

\- Alan Perlis

> Every program has (at least) two purposes: the one for which it was written, and another for which it wasn't.

\- Alan Perlis

> To err is human; to manage error is system.

\- Kevin Kelly

> If software cannot be maintained, then it will be rewritten.

\- Dave Cheney

> A programming language is low level when its programs require attention to the irrelevant.

\- Alan Perlis

> There is an old network saying: Bandwidth problems can be cured with money. Latency problems are harder because the speed of light is fixed. You can’t bribe God.

\- Unknown

> Peres's Law: If a problem has no solution, it may not be a problem, but a fact; not to be solved, but to be coped with over time.

\- Shimon Peres

> One programmer's constant is another programmer's variable.

\- Alan Perlis

> Code is like humor. When you have to explain it, it’s bad.

\- Cory House

> The only thing you will get from a Big Bang Rewrite is a big bang.

\- Martin Fowler

> The first step of any project is to grossly underestimate its complexity and difficulty.

\- Nicoll Hunt

Corollary:

> Hofstadter's Law: It always takes longer than you expect, even when you take into account Hofstadter's Law.

[-Douglas Hofstadter](https://en.wikipedia.org/wiki/Hofstadter%27s_law)
<!-- NCXed -->

> The trick is to fix the problem you have, rather than the problem you want.

\- Bram Cohen
<!-- NCX next -->

> [Programming is like a “choose your own adventure game” except every path leads you to a StackOverflow question from 2013 describing the same bug, with no answer.](https://twitter.com/ppathole/status/1120660372267122689)

\- Pranay Pathole

> Of all the technical debt you can incur, the worst in my experience is bad names - database columns, variables, functions, etc. Fix those IMMEDIATELY before they metastasize all over your codebase and become extremely painful to fix later...and they always do.

\- Jeff Atwood

> [Betting on an apocalyptic future in every line of code - as if any assumption might break in the future - that is the path to immense developer productivity waste.](https://twitter.com/evolvable/status/1113031675796025347)

\- Graham Lee, paraphrased

> [It's amusing how hard it is to get computers to behave deterministically. I mean, they just had the one job.](https://twitter.com/aboodman/status/11217981787542732850)

\- Aaron Boodman

> [There is a rising tide of security breaches. There is an even faster rising tide of hysteria. Yet the world is doing remarkably well overall. This continuing general progress of society suggests that cyber security is not very important.](https://www.schneier.com/blog/archives/2019/03/an_argument_tha.html)

\- Andrew Odlyzko

> This stuff is really important. We don't want to swap the As and the Ts, that would be a real mess.

\- NIH / All of Us

> The cost of adding a feature isn’t just the time it takes to code it. It's also an obstacle to future expansion...The trick is to pick the features that don’t fight each other.

\- John Carmack

> First you listen to the users; then you ignore them.

\- Ken Arnold

> Why does a computer with 1000x faster processor and 100x more memory than 20 years ago still feel slower?
>
> Our use of technology always expands to the very edge of its capacity. A thousand years from now, everyday technology will be just barely sufficient for the job.

\- Jevon's Paradox (aka Wirth's law aka Page's law aka Gates's law aka May's law)


> 1. Make it work.
> 2. Make it right.
> 3. Make it fast.

\- Kent Beck

> Old technology fails frequently, but in a reliable way. New technology fails less often, but when it fails, it fails in an unexpectedly new way we are not prepared for.

\- Kevin Kelly

> The key to performance is elegance, not battalions of special cases. The terrible temptation to tweak should be resisted unless the payoff is really noticeable.

\- Jon Bentley and Doug McIlroy

> Marie Kondo, but for source code. Line by line, does this spark joy? Delete, delete, delete. So long, and thanks for all the bugs.

\- Ben Werdmüller

> Don't solve a problem just because you can imagine it. Wait until there is a problem, then go after it. If you over-anticipate, you will design freedom out of the system.

\- Stewart Brand

> Matlab has normalized the practice of storing array indices as floats starting at 1.0, which now that I am used to it makes me think why bathe or brush my teeth? Why not start doing meth? Why bother at all?

\- Seamus Blackley

> Everything is broken.

\- [Quinn Norton](https://medium.com/message/everything-is-broken-81e5f33a24e1), Bob Dylan, True Detective, and more...

> People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.

\- Donald Knuth

> Don't patch bugs out, rewrite them out.

\- Unknown

> [As a programmer, my core strengths have always been apologizing to users and composing funny tweets.](https://blog.pinboard.in/2013/04/the_matasano_crypto_challenges/)

\- [Maciej Cegłowski](https://twitter.com/@pinboard)

> Absence is beauty, in error logs.

\- Leonard Bogdonoff

> Civilization advances by extending the number of important operations which we can perform without thinking of them.

\- Alfred North Whitehead

> Load-bearing optimization, n.  
>  
> A performance-related change - for example, adding a cache - that accidentally becomes required for correctness.

[- David Smith](https://twitter.com/Catfish_Man/status/735211223323578368)

> It’s a curious thing about our industry: not only do we not learn from our mistakes, we also don’t learn from our successes.

\- Keith Braithwaite

> If you have error reporting and your team ignores it, you don't have error reporting.

\- Graham Hoefer

> Sometimes the problem is to discover what the problem is.

\- Gordon Glegg

> Code gets rewritten all the time. Don't get attached to it. The ideas are all that matter.

\- Parisa Tabriz

availability | downtime, per year | cost
--- | --- | ---
99.9 | 8.76h | $$,$$$
99.99 | 52.6m | $$$,$$$
99.999 | 5.25m | $,$$$,$$$
99.9999 | 31.5s | you can't afford it

\- Christopher Church ([tweet](https://twitter.com/layer_3/status/1019398179215872000))

> `$ git rebase -i master`
>
> error: from the abyss the howls of the Old Ones devour the last shreds of your sanity.
>
> When you have resolved this error, use git rebase --continue

\- Andrew Chatham ([tweet](https://twitter.com/Jumbosaur/status/1017125769871544320))

> Testing leads to failure, and failure leads to understanding.

\- [Burt Rutan](https://en.wikipedia.org/wiki/Burt_Rutan) (SpaceShipOne designer)

> [You have a problem. You use a distributed system. Now you still have a problem, but you no longer know where.](https://twitter.com/llogiq/status/1010831210199777280)

\- [@llogiq](https://twitter.com/@llogiq)
<!-- NCXed -->

> [Hyrum's Law](http://www.hyrumslaw.com/): With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors will be depended on by somebody.

\- Hyrum Wright; [obligatory XKCD](https://xkcd.com/1172/)

> [Software engineering is what happens to computer programming when you add time and other programmers.](https://research.swtch.com/vgo-eng)

\- Russ Cox and Titus Winters

> [Programming is the art of knowing when to use google, when to ask for help, and when to go for a walk around the block.](https://twitter.com/dnscollective/status/412855470294962176)

\-Dennis Collinson

> Sometimes, the elegant implementation is just a function. Not a method. Not a class. Not a framework. Just a function.

\- John Carmack

> We sort of understood abstractly the idea that there are only two kinds of software projects: failures and future legacy horrors.

\- Peter Weinberger

> [Goodhart's Law: When a measure becomes a target, it ceases to be a good measure.](https://en.wikipedia.org/wiki/Goodhart%27s_law)

\- Charles Goodhart

> Walking on water and developing software from a specification are easy if both are frozen.

\- Edward V Berard

> No one in the brief history of computing has ever written a piece of perfect software. It's unlikely that you'll be the first.

\- Andy Hunt

> A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.

\- Niklaus Wirth

> The best programs are the ones written when the programmer is supposed to be working on something else.

\- Melinda Varian

> "Feral systems": Access databases, spreadsheets with macros, and other hacked solutions made out of frustration when current systems don't meet a need.

[- Hadley Beeman](https://twitter.com/hadleybeeman/status/934867384577462274)

> The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.

\- Seymour Cray

> Measuring programming by lines of code is like measuring aircraft building by weight.

\- Bill Gates

> Rules of Optimization:  
> Rule 1: Don't do it.  
> Rule 2 (for experts only): Don't do it yet.

\- Michael A. Jackson
<!-- NCXed -->

> CoffeeScript, Haml, Sass, all on top of me, holding me up psychologically for MONTHS.

[- @erowidrecruiter](https://twitter.com/erowidrecruiter) (Markov-powered mashup of Erowid trip reports and tech recruiter emails)

> Writing code is not an exercise in [ego].

\- Mark Hahn

> If you’ve been pounding nails with your forehead for years, it may feel strange the first time somebody hands you a hammer. But that doesn’t mean that you should strap the hammer to a headband just to give your skull that old familiar jolt.

\- Wayne Throop

> Junior developer: "I will just copy over this code to reuse it"  
> Middle developer: "I will make it DRY with code sharing/inheritance/macros"  
> Senior developer: "I will just copy over this code to reuse it"
<!-- NCXed -->

[- Hubert Lepicki](https://twitter.com/hubertlepicki/status/946725454043598849)

> We are in the business of novel outages.

[- Google SRE](https://cloudplatform.googleblog.com/2018/01/consequences-of-SLO-violations-CRE-life-lessons.html)
<!-- NCXed! -->

> Unix was not designed to stop people from doing stupid things, because that would also stop them from doing clever things.

\- Doug Gwyn

> Twyman's Law: Any figure that looks interesting or different is usually wrong.

\- Tony Twyman

> As-builts are building plans that show in detail exactly what was built, which is always significantly different from what was in the original plans. Without accurate as-builts, says Chuck Charlton, “An electrical failure can have you wandering through the building shotgunning circuit breakers and shinnying down the chases.” ...If the as-builts aren’t updated constantly, each bit of repair or remodeling, each new contractor, each change of property management makes the plans more misleading.

\- Stewart Brand, How Buildings Learn
([see my full presentation](https://docs.google.com/presentation/d/1uU717xJ-JeR3HWkvbkTCxuIKDNoH-eKa_tPGfXq2C7I/edit))

> We live in a society exquisitely dependent on science and technology, in which hardly anyone knows anything about science and technology.

\- Carl Sagan

> Give someone a program, you frustrate them for a day. Teach them how to program, you frustrate them for a lifetime.

\- David Leinweber

> I call it my billion-dollar mistake. It was the invention of the null reference in 1965.

\- Tony Hoare

> Every technology, when sufficiently complicated, becomes programmable.

[- Kenton Varda](https://blog.cloudflare.com/introducing-cloudflare-workers/)
<!-- NCXed -->

> Any sufficiently complicated C or Fortran program contains an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.

[- Philip Greenspun](https://philip.greenspun.com/research/)
<!-- NCXed -->

> Compatibility means deliberately repeating other people's mistakes.

\- David Wheeler

> If the code and the comments disagree, both are probably wrong.

\- Norm Schryer

> Debugging is like being the detective in a crime movie where you are also the murderer.

\- Filipe Fortes
<!-- NCXed -->

> You don't pay engineers to write code, you pay them to understand problems, subtleties, and edges. The code is incidental.

\- Ted Dziuba

> Given sufficient abstraction, every problem becomes hard.

[- @ericlaw](https://twitter.com/ericlaw)

corollary:
> Given sufficient abstraction, every problem becomes every problem.

[- @mikemiles86](https://twitter.com/mikemiles86)

> Technology...is a queer thing. It brings you great gifts with one hand, and it stabs you in the back with the other.

\- C. P. Snow

> We're trying to change the Kleenex mentality of technology - you buy a smartband or an Android Wear watch and next year you'll throw it away...We need to create objects that are worth keeping and upgrading.

\- Philippe Kahn

> Any sufficiently advanced magic is indistinguishable from technology.

\- unknown (apocryphal Larry Niven, Terry Pratchett; note inversion of Arthur C Clarke's law!)

> Technology is the knack of so arranging the world that we don't have to experience it.

\- Max Frisch

> Productivity and reliability depend on the length of the program text, independent of language. You will produce roughly the same number of lines of code in assembly, per hour, as in Ruby or Scheme or Perl.

\- Lutz Prechelt (based on actual research studies)

> Any problem can be solved by adding a layer of indirection...but where network engineering is involved, it's more effective to just stuff it into DNS.

\- Geoff Huston

> A week of coding can save an hour of thinking.

\- unknown

> All technology should be assumed guilty until proven innocent.

\- Jerry Mander

> Engineering is what happens when you take science and economics and try to put them together.

\- Greg Wilson

> Why do engineers seem like such different people? We live every day in a world where one misplaced character brings the whole world crashing down around us.

\- unknown

> “Write code that’s easy to delete, not easy to extend.”

[- Ben Nadel](https://twitter.com/BenNadel/status/831535012075937792)

> The experienced CTO does not feel guilty about technical debt. What counts is how (and how much) they deal with it.

[- via Colin Vernon](https://medium.engineering/@stresslimit)

> 1995: Every object in your home has a clock & it is blinking 12:00  
> 2025: Every object in your home has a IP address & the password is Admin

[- @mcclure111](https://twitter.com/mcclure111/status/688775402584731649)

> \[Software\] is never finished, only abandoned.

\- Leonardo da Vinci

> An action or resource should either not be permitted (zero), happen uniquely (one), or have no arbitrary limit at all (infinity).

\- Willem van der Poel

> Manual until it hurts.

\- Ryan, re automation

> Software is not an academic discipline, not a liberal art. It’s a craft. And the only way to learn craftsmanship is to apprentice.

[- Nelson Minar](http://www.somebits.com/weblog/tech/reed-college-software-development-lab.html)

> At 9:37AM PST, an authorized S3 team member using an established playbook executed a command...one of the inputs to the command was entered incorrectly...

[- 2/27 S3 outage postmortem](https://aws.amazon.com/message/41926/)

> "The road of life is paved with flat squirrels who couldn't make a decision."

\- Anonymous (via MSK)

> Most papers in computer science describe how their author learned what someone else already knew.

\- Peter Landin

> You cannot release crap. There are companies that do this and end up making a tidy profit. You are not that person, because once you are rewarded for releasing crap, you begin a blind walk down a path of mediocrity that ends up with you working at Computer Associates on a product no one has heard of and that no one cares about.

\- [Michael Lopp](http://randsinrepose.com/), [_Managing Humans_](https://books.google.com/books?id=T8C-DAAAQBAJ)

> BUG REPORT: I’ve written hundreds of great tweets and bad things are still happening.

[- Avery Edison](https://twitter.com/aedison/status/824726511651553280)

> Rules of abstraction:
> 1. Don't use abstraction
> 2. Don't use abstraction
> 3. Only consider abstraction when you see at least three things that ARE the same
> 4. All abstractions must pay for themselves
> 5. Beware DRY, the evil siren that tricks you into abstraction

\- [Martin Thompson](https://github.com/odsod/notes/blob/master/talks/2016-01-24-designing-for-performance.md#abstractions)

> In the beginning, the first programmer wrote code from scratch.  
> Henceforth, all code was copied, pasted, and modified.

\- Programmer's Bible, Code Psalms 12:56-57

> Yesterday I was clever, so I wanted to change the world. Today I am wise, so I am changing myself.
― Jalaluddin Rumi

> Have no fear of perfection.  You'll never reach it.

\- Salvador Dali (via MSK)

> My job is to copy data from one protocol buffer to another.

\- ancient Google proverb

> Anything from before you were born is normal and natural.
> Anything invented between when you were 15 and 35 is revolutionary and exciting.
> Anything invented after you’re 35 is against the natural order.

\- Douglas Adams

> \[Looking at dependencies...\]  
> Wait, my code depends on what?

\- ancient Google proverb

> Technical mistakes can and will be corrected with a strong community, but not the other way around.

\- Yehuda Katz (via zack)

> Talent hits a target no one else can hit. Genius hits a target no one else can see.

\- Arthur Schopenhauer (via Othman)

> The question of whether machines can think is about as relevant as the question of whether submarines can swim.

\- Edsger Dijkstra

> I love deadlines. I love the whooshing noise they make as they go by.

\- Douglas Adams

> When a computer receives conflicting instructions from its owner and a third party, the owner should always win.

\- Cory Doctorow, re DRM

> Object-oriented programming is an exceptionally bad idea which could only have originated in California.

\- Edsger W. Dijkstra

> We are stuck with technology when what we really want is just stuff that works.

\- Douglas Adams

> Computer Science is no more about computers than astronomy is about telescopes.

[- Edsger Dijkstra?](https://en.wikiquote.org/wiki/Computer_science#Disputed)

> The Programmers’ Credo: we do these things not because they are easy, but because we thought they were going to be easy.

[- Maciej Cegłowski](https://twitter.com/Pinboard/status/761656824202276864)

> A good scientist has original ideas. A good engineer makes designs with as few original ideas as possible.

\- Freeman Dyson

> Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.

[— Stan Kelly-Bootle](http://exple.tive.org/blarg/2013/10/22/citation-needed/)

> Einstein argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer.

\- Fred Brooks

> In computer science, we're privileged to run elbows with the giants on whose shoulders we stand.

via [@zooko](https://twitter.com/zooko)

> I define UNIX as 30 definitions of regular expressions living under one roof.

\- Donald Knuth

> The best minds of my generation are thinking about how to make people click ads.

\- Jeff Hammerbacher

> Defenders have to be right every time. Attackers only have to be right once.

\- Unknown

> A distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable.

\- Leslie Lamport

> Beware of bugs in the above code; I have only proved it correct, not tried it.

\- Donald Knuth

> In my experience, all distributed consensus algorithms are either 1: Paxos, 2: Paxos with extra unnecessary cruft, or 3: broken.

\- Mike Burrows

> We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.

[- Donald Knuth (apocryphal: C.A.R Hoare)](https://shreevatsa.wordpress.com/2008/05/16/premature-optimization-is-the-root-of-all-evil/)
<!-- NCXed -->

> Progress is a new error message.

\- Me

> The idea that new code is better than old is patently absurd. Old code has been used. It has been tested. Lots of bugs have been found, and they’ve been _fixed_. There’s nothing wrong with it. It doesn’t acquire bugs just by sitting around on your hard drive. Au contraire, baby! Is software supposed to be like an old Dodge Dart, that rusts just sitting in the garage? Is software like a teddy bear that’s kind of gross if it’s not made out of _all new material?_

[- Joel Spolsky, _Things You Should Never Do, Part I_](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/)

The first step in fixing a broken program is getting it to fail repeatably.

\- Tom Duff

> It is basically always the case that the long-term costs of keeping a system working reliably vastly exceed any inconveniences you encounter while building it.

\- [Dan McKinley](https://mcfunley.com/), [Choose Boring Technology](https://mcfunley.com/choose-boring-technology#optimize-globally)


<!--
https://en.wikiquote.org/wiki/Computer_science
https://en.wikiquote.org/wiki/Engineering
https://en.wikiquote.org/wiki/Electrical_engineering
https://en.wikiquote.org/wiki/Software_engineering
https://en.wikiquote.org/wiki/Systems_engineering
https://en.wikiquote.org/wiki/Technology
https://en.wikiquote.org/wiki/Richard_Feynman

http://www.azquotes.com/
https://twitter.com/Pinboard

http://vanderburg.org/etc/soft-quotes.html

!!! https://twitter.com/CodeWisdom !!!

https://twitter.com/erowidrecruiter

http://pu.inf.uni-tuebingen.de/users/klaeren/epigrams.html

https://github.com/dwmkerr/hacker-laws

TODO: unix zen koans
http://www.catb.org/~esr/writings/unix-koans/
http://canonical.org/~kragen/tao-of-programming.html
http://mercury.ccil.org/~cowan/upc/
http://www.catb.org/~esr/jargon/html/koans.html
http://www.catb.org/~esr/faqs/loginataka.html
http://www.gu.uwa.edu.au/users/greg/
http://www.ibiblio.org/zen/cgi-bin/koan-index.pl
https://github.com/dwmkerr/hacker-laws
http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf


Controlling complexity is the essence of computer programming.
\- Brian W. Kernighan

Programming is a creative art form based in logic. Every programmer is different and will code differently. It’s the output that matters.
\- John Romero

The most important property of a program is whether it accomplishes the intention of its user.
\- C.A.R. Hoare

https://typicalprogrammer.com/what-does-code-readability-mean

Regression testing cuts test intervals in half.
\- Larry Bernstein

Avoid asymmetry.
\- Andy Huber

The sooner you start to code, the longer the program will take.
\- Roy Carlson

If you can’t write it down in English, you can’t code it.
\- Peter Halpern

Details count.
\- Peter Wrinberger

If the code and the comments disagree, then both are probably wrong.
\- Norm Schyer

A procedure should fit on a page.
\- David Tribble

If you have too many special cases,you are doing it wrong.
\- Craig Zerouni

Get your data structures correct first, and the rest of the program will write itself.
\- David Iones

A program designed for inputs from people is usually stressed beyond the breaking point by computer-generated inputs.
\- Dennis Ritchie

Don’t make the user provide information that the system already knows.
\- Rick Lemons

For 80 percent of all data sets, 95 percent of the information can be seen in a good graph.
\- William S. Cleveland

It takes three times the effort to find and fix bugs in system test than when done by the developer. It takes ten times the effort to find and fix bugs in the field than when done in system test. Therefore, insist on unit tests by the developer.
\- Larry Bernstein

Don’t get suckered in by the comments-they are terribly misleading. Debug only the code.
\- Dave Storer

Testing can show the presence of bugs, but not their absence.
\- Edsger W. Dijkstra

Each new user of a new system uncovers a new class of bugs.
\- Brian Kernighan

If it ain’t broke, don’t fix it.
\- Ronald Reagan

[The Maintainer’s Motto] If we can’t fix it, it ain’t broke.
\- Lieutenant Colonel Walt Weir, United States Army

The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand.
\- Douglas W. Iones

On some machines indirection is slower with displacement, so the most-used member of a structure or a record should be first.
\- Mike Morton

In non-I/O-bound programs, a few percent of the source code typically accounts for over half the run time.
\- ???

[The Test of Negation] Don’t include a sentence in documentation if its negation is obviously false.
\- Bob Martin

When explaining a command, or language feature, or hardware widget, first describe the problem it is designed to solve.
\- David Martin

[One Page Principle] A (specification, procedure, test plan) that will not fit on one page of 8.5-by-l.1 inch paper cannot be understood.
\- Mark Ardis

The job’s not over until the paperwork’s done.
\- Anonymous

The structure of a system reflects the structure of the organization that built it.
\- Richard E. Fairley

Don’t keep doing what doesn’t work.
\- Anonymous

[Rule of Credibility] The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.
\- Tom Cargill

Less than 10 percent of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping.
\- May Shaw

Good judgment comes from experience, and experience comes from bad judgment.
\- Fred Brooks

Don’t write a new program if one already does more or less what you want. And if you must write a program, use existing code to do as much of the work as possible.
\- Richard Hill

Whenever possible, steal code.
\- Tom Duff

[Conservation of Code Size] When you turn an ordinary page of code into just a handful of instructions for speed, expand the comments to keep the number of source lines, constant.
\- Mike Morton

The fastest I/O is no I/O.
\- Nil’s-Peter Nelson

The cheapest, fastest, and most reliable components of a computer system are those that aren’t there.
\- Gordon Bell

Compiler Writer’s Motto: Optimization a wrong program worse is no sin.
\- Bill McKeeman Wang Znstitute

LISP programmers know the value of everything but the cost of nothing.
\- Alan Perlis

[Little’s Formula] The average number of objects in a queue is the product of the entry rate and the average holding time.
\- Peter Denning RL4cs

Good customer relations double productivity.
\- Larry Bernstein

Translating a working program to a new language or system takes 10 percent of the original development time or manpower or cost.
\- Douglas W. Jones

If you lie to the computer, it will get you.
\- Perry Farrar

If a system doesn’t have to be reliable, it can do anything else.
\- H. H. Williams

One person’s constant is another person’s variable.
\- Susan Gerhart

One person’s data is another person’s program.
\- Guy L. Steele, Jr

[Thompson’s rule for first-time telescope makers] It is faster to make a four-inch mirror then a six-inch mirror than to make a six-inch mirror.
\- Bill McKeeman

Furious activity is no substitute for understanding.
\- H. H. Williams

If you think good architecture is expensive, try bad architecture.
\- Brian Foote and Joseph Yoder

There are two ways you can get exercise out of a bicycle: you can "overhaul" it, or you can ride it. On the whole, I am not sure that a man who takes his pleasure overhauling does not have the best of the bargain. He is independent of the weather and the wind; the state of the roads troubles him not. Give him a screw-hammer, a bundle of rags, an oil-can, and something to sit down upon, and he is happy for the day. He has to put up with certain disadvantages, of course; there is no joy without alloy. He himself always looks like a tinker, and his machine always suggests the idea that, having stolen it, he has tried to disguise it; but as he rarely gets beyond the first milestone with it, this, perhaps, does not much matter. The mistake some people make is in thinking they can get both forms of sport out of the same machine. This is impossible; no machine will stand the double strain. You must make up your mind whether you are going to be an "overhauler" or a rider.

- Jerome K Jerome, http://www.cyf-kr.edu.pl/rowery/3men03.html

Before you can develop reusable software you need to have developed it three times. Before you can reap the benefits of reuse, you need to reuse it at least three times.
- Ted Biggerstaff, via Will Tracz

Having a discussion about technical debt is a luxury. Being able to talk about technical debt implies success.

- Kelly Sutton

All PaaSes will expand until they are indistinguishable from IaaS.

- Joshua Smith

A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system.

- John Gall (aka Gall's Law)

The more equally attractive two alternatives seem, the harder it can be to choose between them — no matter that, to the same degree, the choice can only matter less.
- Edward Fredkin

High tolerance for failure, low tolerance for incompetence.
— Bill George

History shows us clearly that humanity is moved forward not by people who stop every little while to try to gauge the ultimate success or failure of their ventures, but by those who think deeply about what is right and then put all their energy into doing it.
— Murray Gell-Mann

If the world were merely seductive, that would be easy. If it were merely challenging, that would be no problem. But I arise in the morning torn between a desire to improve the world, and a desire to enjoy the world. That makes it hard to plan the day.
— E. B. White

If you want to build a ship, don’t drum up people together to collect wood and don’t assign them tasks and work, but rather teach them to long for the endless immensity of the sea.
— Antoine de Saint- Exupéry

Most people overestimate what they can do in one year and underestimate what they can do in ten years.
― Bill Gates

Sometimes it’s necessary to go a long distance out of the way in order to come back a short distance correctly.
— Edward Albee

The great thing in this world is not so much where we stand, as in what direction we are moving. To reach the port of heaven, we must sail sometimes with the wind and sometimes against it — but we must sail, and not drift, nor lie at anchor.
— Oliver Wendell Holmes

There are two kinds of truth, small truth and great truth. You can recognize a small truth because its opposite is a falsehood. The opposite of a great truth is another profound truth.
— Niels Bohr

When I am working on a problem I never think about beauty. I only think about how to solve the problem. But when I have finished, if the solution is not beautiful, I know it is wrong.
— R. Buckminster Fuller

You don’t make decisions because they are easy; you don’t make them because they are cheap; you don’t make them because they are popular; you make them because they’re right.
—Theodore Hesburgh

It’s not at all important to get it right the first time. It’s vitally important to get it right the last time.
- The Pragmatic Programmer

Looking at code you wrote more than two weeks ago is like looking at code you are seeing for the first time.
- Dan Hurvitz

I'm increasingly thinking that every functioning system has two forms: The abstraction that outsiders are led to believe, and the reality that insiders actually and carefully operate.

You don't incrementally learn a system.  You eventually unlearn its necessary lies.
https://twitter.com/dakami/status/953444486209716225

It's not usually a good idea to reinvent the wheel, but it's a good idea slightly more often than it's recommended, which is never.
- Paul Graham
https://twitter.com/paulg/status/1172430527862718465

It is easier to write an incorrect program than to understand a correct one.
- Alan Perlis

If a language doesn't affect the way you think about programming, it's not worth knowing.
- Alan Perlis

Simplicity does not precede complexity, but follows it.
- Alan Perlis

Computer Science is embarrassed by the computer.
- Alan Perlis

I'm a 10x developer. That is it takes me 10x the amount of time to write the same amount of code as other people.
- @BeardOps
https://twitter.com/BeardOps/status/1091456027768250368

YAML: the result of people ignoring the lessons from JSON (the result of people ignoring the lessons from XML). Now we’re ‘coding’ infra with 3000 line typeless, indentation sensitive markup, escaping it, then embed it in another 3000 line typeless, indentation sensitive file.

I propose renaming YAML to FML.

- Lars Rosenquist
https://twitter.com/larsrosenquist/status/1200765420543840257

"App Engine is the OG of serverless," said Oren Teich, product management director of Google Cloud Platform, suggesting that Google a decade ago helped define what would become known as serverless computing. Back then, it was called platform-as-a-service.
https://www.theregister.co.uk/2018/07/25/google_app_engine_python_3/

Crypto is a tool for turning a whole swathe of problems into key management problems. Key management problems are way harder than (virtually all) cryptographers think.
https://twitter.com/LeaKissner/status/1198595109756887040?s=19

Law is a lot more ex post facto, and he-who-has-the-gold-makes-the-rules, than it would appear.

Medicine is a lot more "just distract the patient till the body fixes itself".

Microprocessor behavior is determined, on other things.

Global PKI is a lot more DNS than it appears.
https://twitter.com/dakami/status/953447672584683520?s=19

It’s hard to read through a book on the principles of magic without glancing at the cover periodically to make sure it isn’t a book on software design.
—Bruce Tognazzini

Programs must be written for people to read, and only incidentally for machines to execute.
—Abelson and Sussman

A language that doesn’t have everything is actually easier to program in than some that do.
—Dennis Ritchie

The tragedy of our time is that we’ve got it backwards, we’ve learned to love techniques and use people.
—Herb Kelleher

When I’m working on a problem, I never think about beauty. I think only how to solve the problem.

But when I have finished, if the solution is not beautiful, I know it is wrong.
—R. Buckminster Fuller

Programmers spend the first 5 years of their career mastering complexity, and the rest of their lives learning simplicity.
—Buzz Andersen

Simplicity is the unavoidable price we must pay for reliability.
—C.A.R. Hoare

Don’t shoot yourself in the foot with a magic bullet.
—Gerald Jay Sussman

The closer you try to get to perfect - latency, bugs, availability, etc - the more it costs you. You'll never get there. Pick a threshold you're ok with, and accept it.
- Me

If at first you don’t succeed, call it version 1.0.
- Unknown

Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius—and a lot of courage to move in the opposite direction.
- E.F. Schumacher

Technology brings us wonderment and annoyance, in roughly equal measures.
- Bill Bonner

> Software has bugs. Security-relevant software has security-relevant bugs.

\- [Steve Bellovin](https://www.cs.columbia.edu/~smb/)
-->
