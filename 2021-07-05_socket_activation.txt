43593
Socket activation

<p class="right half">
 <img class="shadow" src="/the_creation_of_adam_closeup.jpg">
</p>

I've spent some time over the last few weeks [reading](http://0pointer.net/blog/projects/systemd.html) [about](https://www.aplawrence.com/Basics/unix-startup-scripts-1.html) [the](https://lwn.net/Articles/573013/) [various](https://wiki.gentoo.org/wiki/Comparison_of_init_systems) *nix [init systems](https://en.wikipedia.org/wiki/Init): venerable [SysV](https://en.wikipedia.org/wiki/Init#SYSV), interim replacement [Upstart](http://upstart.ubuntu.com/), controversial monolith [systemd](https://systemd.io/), Apple's proprietary [launchd](https://en.wikipedia.org/wiki/Launchd), and niche variants like [runit](http://smarden.org/runit/) and [Epoch](https://universe2.us/epoch.html). Lots of history, lots of flame wars.

One key takeaway: [socket activation](http://0pointer.net/blog/projects/systemd.html) is a breathtakingly elegant way to parallelize system startup. In every modern operating system, boot consists of starting hundreds of processes and waiting for them to initialize. Most depend on each other, so many init systems encode these dependencies by hand, waiting for each process to initialize completely before starting the next. Not surprisingly, this is heavyweight, slow, and a maintenance burden.

The key insight was that processes generally interact with each other over sockets, usually AF_UNIX (ie files), occasionally AF_INET and others. If a process isn't yet listening on a socket, connecting to it will fail, so a given process can't start until the processes it depends on are ready and listening.
<!--more-->

[As usual in computer science, the solution was adding a level of indirection.](https://wiki.c2.com/?OneMoreLevelOfIndirection) If a process attempts to connect to a socket that isn't ready, don't fail! Instead, accept the connection, buffer any data the process sends, and when it tries to read, block it. When a service later listens on the socket, connect the blocking client, forward the buffered data, and let things continue like normal.

This does two things. First, it lets you start more processes in parallel, which speeds up startup. Second, it removes much of the need to hand-code dependencies, especially their orderings. If a process can naturally block until its dependencies start, there's no harm in starting it early, and no need to know exactly which processes to start when.

This isn't a new idea. [inetd](https://en.wikipedia.org/wiki/Inetd) did this for network-facing services [way back in 1986](https://en.wikipedia.org/wiki/History_of_the_Berkeley_Software_Distribution#4.3BSD). launchd has used it to speed up Mac OS startup times for decades. And now systemd does it in more and more Linux distros.

<p class="right half" style="text-align: center">
  <video class="shadow" controls src="/systemd_joke.mp4">
  <em><a href="https://mastodon.social/@chuso/106065356199177230">Chuso PÃ©rez</a></em>
</p>

At this point, I'm obliged to note that systemd has [provoked a debate in the Linux community](https://en.wikipedia.org/wiki/Systemd#Reception) that has [only snowballed](http://0pointer.net/blog/projects/the-biggest-myths.html) [over time](https://lwn.net/Articles/770093/). It's probably good software, but it's gradually taken over more and more functionality that was historically provided by other services, contrary to [the beloved Unix philosophy "do one thing well."](https://wiki.c2.com/?UnixDesignPhilosophy)

I have no idea which side is right. I just know that socket activation is a [beautiful solution](https://simple.wikiquote.org/wiki/Richard_Buckminster_Fuller#Sourced_quotes) to a hard problem. Sometimes, that's enough.
