38110
Engineering lessons

Also see [software engineering quotes](/software-engineering-quotes).

* All code is liability.
* Manual until it hurts.
* Change is the only constant.
* You can't predict the future.
* Life is tradeoffs.
* [Agree on a project's values up front.](https://archive.org/details/vimeo-230142234) Use them to decide on tradeoffs.
* Prioritize.
* Shorten feedback loops.
* Iterate fast, experiment cheaply.
* [Worse is better.](https://en.wikipedia.org/wiki/Worse_is_better)
* Reuse existing code.
* DRY.
* Orthogonality is powerful. Make things cross cutting.
* Data over config. Config over code.
* Empower non-engineers.
* Make interfaces. Map them to teams.
* Data wants to be dirty.
* Duplicated data wants to skew.
* It's not dumb if it works.
* [There's a healthy tension between flow and YAGNI.](/2020-05-27_flow-vs-yagni) Navigate them thoughtfully.
* [Bandwidth increases with the _square_ of latency.](/2019-07-10_37849) This has subtle but powerful implications for system design. Ignore it at your peril.
